++ initial_cwd_='/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23'
++ fail=0
+++ testdir_prefix_
+++ printf gt
++ pfx_=gt
+++ mktempd_ '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23' gt-suffix-length.sh.XXXX
+++ case $# in
+++ destdir_='/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23'
+++ template_=gt-suffix-length.sh.XXXX
+++ MAX_TRIES_=4
+++ case $destdir_ in
+++ case $template_ in
++++ unset TMPDIR
+++ d='/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
+++ case $d in
+++ test -d '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
++++ ls -dgo '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
++++ tr S -
+++ perms='drwx------ 2 4096 Mar  6 11:58 /home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
+++ case $perms in
+++ test 0 = 0
+++ echo '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
+++ return
++ test_dir_='/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
++ cd '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
++ gl_init_sh_nl_='
'
++ IFS=' 	
'
++ for sig_ in 1 2 3 13 15
+++ expr 1 + 128
++ eval 'trap '\''Exit 129'\'' 1'
+++ trap 'Exit 129' 1
++ for sig_ in 1 2 3 13 15
+++ expr 2 + 128
++ eval 'trap '\''Exit 130'\'' 2'
+++ trap 'Exit 130' 2
++ for sig_ in 1 2 3 13 15
+++ expr 3 + 128
++ eval 'trap '\''Exit 131'\'' 3'
+++ trap 'Exit 131' 3
++ for sig_ in 1 2 3 13 15
+++ expr 13 + 128
++ eval 'trap '\''Exit 141'\'' 13'
+++ trap 'Exit 141' 13
++ for sig_ in 1 2 3 13 15
+++ expr 15 + 128
++ eval 'trap '\''Exit 143'\'' 15'
+++ trap 'Exit 143' 15
++ trap remove_tmp_ 0
+ path_prepend_ ./src
+ test 1 '!=' 0
+ path_dir_=./src
+ case $path_dir_ in
+ abs_path_dir_='/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/./src'
+ case $abs_path_dir_ in
+ PATH='/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/./src:/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/src:/home/jfloyd/.opam/system/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games'
+ create_exe_shims_ '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/./src'
+ case $EXEEXT in
+ return 0
+ shift
+ test 0 '!=' 0
+ export PATH
+ print_ver_ split
+ test yes = yes
+ local i
+ for i in '$*'
+ env split --version
split (GNU coreutils) 8.23
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Torbjorn Granlund and Richard M. Stallman.
+ a_z='a b c d e f g h i j k l m n o p q r s t u v w x y z'
+ printf %s a b c d e f g h i j k l m n o p q r s t u v w x y z 0
+ tr -d ' '
+ files=
+ for i in '$a_z'
+ files='xaa '
+ for i in '$a_z'
+ files='xaa xab '
+ for i in '$a_z'
+ files='xaa xab xac '
+ for i in '$a_z'
+ files='xaa xab xac xad '
+ for i in '$a_z'
+ files='xaa xab xac xad xae '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw xax '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw xax xay '
+ for i in '$a_z'
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw xax xay xaz '
+ files='xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw xax xay xaz xba'
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xaa
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xab
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xac
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xad
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xae
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xaf
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xag
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xah
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xai
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xaj
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xak
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xal
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xam
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xan
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xao
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xap
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xaq
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xar
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xas
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xat
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xau
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xav
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xaw
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xax
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xay
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xaz
+ for f in '$files'
+ printf 'creating file '\''%s'\''\n' xba
+ echo split: output file suffixes exhausted
+ split -b 1 -a 1 in
+ test -f xa
+ test -f xz
+ test -f xaa
+ test -f xaz
+ rm -f xa xb xc xd xe xf xg xh xi xj xk xl xm xn xo xp xq xr xs xt xu xv xw xx xy xz
+ compare exp-too-short err
+ compare_dev_null_ exp-too-short err
+ test 2 = 2
+ test xexp-too-short = x/dev/null
+ test xerr = x/dev/null
+ return 2
+ case $? in
+ compare_ exp-too-short err
+ diff -u exp-too-short err
+ split --verbose -b 1 -a 2 in
+ compare exp err
+ compare_dev_null_ exp err
+ test 2 = 2
+ test xexp = x/dev/null
+ test xerr = x/dev/null
+ return 2
+ case $? in
+ compare_ exp err
+ diff -u exp err
+ test -f xbb
+ n=1
+ for f in '$files'
++ cut -b 1 in
+ expected_byte=a
++ cat xaa
+ b=a
+ test a = a
++ expr 1 + 1
+ n=2
+ for f in '$files'
++ cut -b 2 in
+ expected_byte=b
++ cat xab
+ b=b
+ test b = b
++ expr 2 + 1
+ n=3
+ for f in '$files'
++ cut -b 3 in
+ expected_byte=c
++ cat xac
+ b=c
+ test c = c
++ expr 3 + 1
+ n=4
+ for f in '$files'
++ cut -b 4 in
+ expected_byte=d
++ cat xad
+ b=d
+ test d = d
++ expr 4 + 1
+ n=5
+ for f in '$files'
++ cut -b 5 in
+ expected_byte=e
++ cat xae
+ b=e
+ test e = e
++ expr 5 + 1
+ n=6
+ for f in '$files'
++ cut -b 6 in
+ expected_byte=f
++ cat xaf
+ b=f
+ test f = f
++ expr 6 + 1
+ n=7
+ for f in '$files'
++ cut -b 7 in
+ expected_byte=g
++ cat xag
+ b=g
+ test g = g
++ expr 7 + 1
+ n=8
+ for f in '$files'
++ cut -b 8 in
+ expected_byte=h
++ cat xah
+ b=h
+ test h = h
++ expr 8 + 1
+ n=9
+ for f in '$files'
++ cut -b 9 in
+ expected_byte=i
++ cat xai
+ b=i
+ test i = i
++ expr 9 + 1
+ n=10
+ for f in '$files'
++ cut -b 10 in
+ expected_byte=j
++ cat xaj
+ b=j
+ test j = j
++ expr 10 + 1
+ n=11
+ for f in '$files'
++ cut -b 11 in
+ expected_byte=k
++ cat xak
+ b=k
+ test k = k
++ expr 11 + 1
+ n=12
+ for f in '$files'
++ cut -b 12 in
+ expected_byte=l
++ cat xal
+ b=l
+ test l = l
++ expr 12 + 1
+ n=13
+ for f in '$files'
++ cut -b 13 in
+ expected_byte=m
++ cat xam
+ b=m
+ test m = m
++ expr 13 + 1
+ n=14
+ for f in '$files'
++ cut -b 14 in
+ expected_byte=n
++ cat xan
+ b=n
+ test n = n
++ expr 14 + 1
+ n=15
+ for f in '$files'
++ cut -b 15 in
+ expected_byte=o
++ cat xao
+ b=o
+ test o = o
++ expr 15 + 1
+ n=16
+ for f in '$files'
++ cut -b 16 in
+ expected_byte=p
++ cat xap
+ b=p
+ test p = p
++ expr 16 + 1
+ n=17
+ for f in '$files'
++ cut -b 17 in
+ expected_byte=q
++ cat xaq
+ b=q
+ test q = q
++ expr 17 + 1
+ n=18
+ for f in '$files'
++ cut -b 18 in
+ expected_byte=r
++ cat xar
+ b=r
+ test r = r
++ expr 18 + 1
+ n=19
+ for f in '$files'
++ cut -b 19 in
+ expected_byte=s
++ cat xas
+ b=s
+ test s = s
++ expr 19 + 1
+ n=20
+ for f in '$files'
++ cut -b 20 in
+ expected_byte=t
++ cat xat
+ b=t
+ test t = t
++ expr 20 + 1
+ n=21
+ for f in '$files'
++ cut -b 21 in
+ expected_byte=u
++ cat xau
+ b=u
+ test u = u
++ expr 21 + 1
+ n=22
+ for f in '$files'
++ cut -b 22 in
+ expected_byte=v
++ cat xav
+ b=v
+ test v = v
++ expr 22 + 1
+ n=23
+ for f in '$files'
++ cut -b 23 in
+ expected_byte=w
++ cat xaw
+ b=w
+ test w = w
++ expr 23 + 1
+ n=24
+ for f in '$files'
++ cut -b 24 in
+ expected_byte=x
++ cat xax
+ b=x
+ test x = x
++ expr 24 + 1
+ n=25
+ for f in '$files'
++ cut -b 25 in
+ expected_byte=y
++ cat xay
+ b=y
+ test y = y
++ expr 25 + 1
+ n=26
+ for f in '$files'
++ cut -b 26 in
+ expected_byte=z
++ cat xaz
+ b=z
+ test z = z
++ expr 26 + 1
+ n=27
+ for f in '$files'
++ cut -b 27 in
+ expected_byte=0
++ cat xba
+ b=0
+ test 0 = 0
++ expr 27 + 1
+ n=28
+ split -a2 -b1000
+ split -a2 -l1000
+ split -a2 -C1000
+ rm -f xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw xax xay xaz xba
+ split -a2 -n1000
split: the suffix length needs to be at least 3
+ test -f xaa
+ Exit 0
+ set +e
+ exit 0
+ exit 0
+ remove_tmp_
+ __st=0
+ cleanup_
+ :
+ cd '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23'
+ chmod -R u+rwx '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
+ rm -rf '/home/jfloyd/Documents/Projects/Proactive Diversity/coreutils-8.23/gt-suffix-length.sh.W9zm'
+ exit 0
